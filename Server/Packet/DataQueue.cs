using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Server
{
	//=====================================================================================================================
	// Data 객체를 재활용 하기 위해 Data 객체를 생성/전달/반환하는 클래스
	//=====================================================================================================================
	public class DataQueue
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Member variables

		// m_queue의 접근을 관리하는 객체
		private object m_lockObject = new object();
		// Data 객체를 담고 있는 Queue
		private Queue<Data> m_queue = new Queue<Data>();

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Member functions

		//=====================================================================================================================
		// Data 객체를 호출하는 함수
		// Return : m_queue 에 데이터가 존재할 경우 가장 첫번째 Data 객체, 없을 경우 새로 생성한 Data 객체
		//=====================================================================================================================
		public Data GetData()
		{
			// 해당함수는 비동기 접근이 이루어져 m_lockObject 객체를 lock 처리 이후 접근
			lock (m_lockObject)
			{
				// m_queue 데이터가 존해할 경우 가장 첫번째 데이터 반환 / 없을 경우 새로 생성
				if (m_queue.Count > 0)
					return m_queue.Dequeue();
				else
					return CreateData();
			}
		}

		//=====================================================================================================================
		// 사용이 끝난 Data 객체를 반환하는 함수
		//
		// pakcet : 반환할 객체
		//=====================================================================================================================
		public void ReturnData(Data packet)
		{
			if (packet == null)
				return;

			// 해당함수는 비동기 접근이 이루어져 m_lockObject 객체를 lock 처리 이후 접근
			lock (m_lockObject)
			{
				m_queue.Enqueue(packet);
			}
		}

		//=====================================================================================================================
		// Data 객체를 생성하는 함수
		// Return : 새로 생성된 Data 객체
		//=====================================================================================================================
		private Data CreateData()
		{
			return new Data();
		}

		//=====================================================================================================================
		// m_queue 내에 존재하는 모든 Data 객체를 삭제하는 함수
		//=====================================================================================================================
		public void Clear()
		{
			lock (m_lockObject)
			{
				m_queue.Clear();
			}
		}
	}
}
