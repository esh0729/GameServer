using System;
using System.Collections.Generic;

namespace ServerFramework
{
	//=====================================================================================================================
	// SFHandler를 상속받은 작업 핸들러의 객체 생성을 위한 클라이언트 명령타입과 핸들러 클래스 타입을 저장하는 추상 클래스
	//=====================================================================================================================
	public abstract class SFHandlerFactory
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Member variables

		// 클라이언트 명령 타입을 키로 하여 핸들러 클래스 타입을 저장하는 컬렉션
		private Dictionary<int, Type> m_handlers = new Dictionary<int, Type>();

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Member functions

		//=====================================================================================================================
		// 핸들러 타입을 저장하는 함수
		//
		// nName : 클라이언트 명령 타입
		//=====================================================================================================================
		protected void AddHandler<T>(int nName) where T : SFHandler
		{
			// 클라이언트 명령 타입과 일반화된 핸들러 클래스 타입을 저장
			m_handlers.Add(nName, typeof(T));
		}

		//=====================================================================================================================
		// 핸들러 타입을 저장하는 함수
		// Return : 클라이언트 명령 타입에 매칭 되는 핸들러 클래스 타입
		//
		// nName : 클라이언트 명령 타입
		//=====================================================================================================================
		protected Type GetHandler(int nName)
		{
			Type type;

			return m_handlers.TryGetValue(nName, out type) ? type : null;
		}

		//=====================================================================================================================
		// 초기화 함수
		//=====================================================================================================================
		public void Init()
		{
			// 자식 클래스 초기화 함수 호출
			InitInternal();
		}

		//=====================================================================================================================
		// 자식 클래스의 초기화를 위한 함수
		//=====================================================================================================================
		protected abstract void InitInternal();
	}
}
