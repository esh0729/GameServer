using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ServerFramework
{
	//=====================================================================================================================
	// 난수를 생성하는 클래스
	//=====================================================================================================================
	public class SFRandom
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Static member variables

		// 랜덤 객체
		private static Random s_random = new Random();
		// 랜덤 클래스는 멀티스레드에 대한 안정성을 보장받지 않으므로 랜덤 객체에대한 스레드의 접근을 제한하는 잠금전용 오브젝트
		private static object s_syncObject = new object();

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Static member functions

		//
		// int
		//

		//=====================================================================================================================
		// 상한을 가진 임의의 정수를 반환하는 함수
		// Return : 0 이상의 상한을 가진 임의로 생성된 정수
		//
		// nMaxValue : 생성될 난수에 대한 상한값(nMaxValue 제외)
		//=====================================================================================================================
		public static int NextInt(int nMaxValue)
		{
			// s_random 객체의 동시 접근을 막기위한 lock 처리
			lock (s_syncObject)
			{
				// 난수 생성
				return s_random.Next(nMaxValue);
			}
		}

		//=====================================================================================================================
		// 하한과 상한을 가진 임의의 정수를 반환하는 함수
		// Return : 하한과 상한을 가진 임의로 생성된 정수
		//
		// nMinValue : 생성될 난수에 대한 하한값(nMinValue 포함)
		// nMaxValue : 생성될 난수에 대한 상한값(nMaxValue 제외)
		//=====================================================================================================================
		public static int NextInt(int nMinValue, int nMaxValue)
		{
			// s_random 객체의 동시 접근을 막기위한 lock 처리
			lock (s_syncObject)
			{
				// 난수 생성
				return s_random.Next(nMinValue, nMaxValue);
			}
		}

		//
		// float
		//

		//=====================================================================================================================
		// 상한을 가진 임의의 소수를 반환하는 함수
		// Return : 0 이상의 상한을 가진 임의로 생성된 소수
		//
		// nMaxValue : 생성될 난수에 대한 상한값(nMaxValue 포함)
		//=====================================================================================================================
		public static float NextFloat(float fMaxValue)
		{
			// s_random 객체의 동시 접근을 막기위한 lock 처리
			lock (s_syncObject)
			{
				// 난수 생성
				return (float)(s_random.NextDouble() * fMaxValue);
			}
		}

		//=====================================================================================================================
		// 하한과 상한을 가진 임의의 소수를 반환하는 함수
		// Return : 하한과 상한을 가진 임의로 생성된 수소
		//
		// nMinValue : 생성될 난수에 대한 하한값(nMinValue 포함)
		// nMaxValue : 생성될 난수에 대한 상한값(nMaxValue 포함)
		//=====================================================================================================================
		public static float NextFloat(float fMinValue, float fMaxValue)
		{
			// s_random 객체의 동시 접근을 막기위한 lock 처리
			lock (s_syncObject)
			{
				// 난수 생성
				return fMaxValue - (float)(s_random.NextDouble() * (fMaxValue - fMinValue));
			}
		}
	}
}
