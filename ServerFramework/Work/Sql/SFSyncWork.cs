using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace ServerFramework
{
	//=====================================================================================================================
	// SFSync 객체를 호출하여 작업 대기 및 진행을 처리하는 클래스
	//=====================================================================================================================
	public class SFSyncWork
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Member variables

		// 작업 요청자 ID
		private object m_id = null;
		// 작업 요청자의 타입
		private SyncWorkType m_type = default(SyncWorkType);

		// 동기객체
		private SFSync m_sync = null;

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Constructors

		//=====================================================================================================================
		// 생성자
		//
		// id : 작업 요청자 ID
		// type : 작업 요청자의 타입
		//=====================================================================================================================
		public SFSyncWork(object id, SyncWorkType type)
		{
			m_id = id;
			m_type = type;
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Member functions

		//=====================================================================================================================
		// 작업 요청자 타입과 작업 요청자ID를 통하여 동기객체를 호출하는 함수 
		//=====================================================================================================================
		public void Init()
		{
			m_sync = SFSyncFactory.GetSync(m_type, m_id);
		}

		//=====================================================================================================================
		// 작업 대기와 스레드 이벤트 신호 차단 요청을 하여 다음 작업이 처리되지 않도록 하는 함수
		//=====================================================================================================================
		public void Waiting()
		{
			m_sync.Waiting();
			m_sync.Reset();
		}

		//=====================================================================================================================
		// 스레드 이벤트 신호 받음 요청을 하여 대기중인 다음 작업을 진행시키는 함수
		//=====================================================================================================================
		public void Set()
		{
			m_sync.Set();
		}
	}
}
