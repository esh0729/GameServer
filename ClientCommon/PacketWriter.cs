using System;
using System.IO;

namespace ClientCommon
{
	//=====================================================================================================================
	// (BinaryWriter 상속) 데이터 송수신에 사용되는 패킷의 직렬화를 추가로 처리하는 클래스(BinaryWriter로 직렬화 할수 없는 객체를 직렬화)
	//=====================================================================================================================
	public class PacketWriter : BinaryWriter
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Constructors

		//=====================================================================================================================
		// 생성자
		//
		// output : 패킷의 정보를 저장할 스트림
		//=====================================================================================================================
		public PacketWriter(Stream output) :
			base(output)
		{
		}

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// Member functions

		//=====================================================================================================================
		// Guid(고유식별자)의 정보를 직렬화 하여 스트림에 저장하는 함수
		//
		// guid : 송신할 Guid 데이터
		//=====================================================================================================================
		public void Write(Guid guid)
		{
			// Guid를 문자열로 변환하여 저장
			Write(guid.ToString());
		}

		//=====================================================================================================================
		// Guid(고유식별자) 배열의 정보를 직렬화 하여 스트림에 저장하는 함수
		//
		// guids : 송신할 Guid 데이터 배열
		//=====================================================================================================================
		public void Write(Guid[] guids)
		{
			// 배열이 null의 경우 false 값을 직렬화 하여 저장
			if (guids == null)
			{
				Write(false);
				return;
			}

			// 배열이 null이 아닐경우 true 값을 직렬화 하여 저장
			Write(true);

			// 배열의 길이를 저장
			int nLength = guids.Length;
			Write(nLength);

			// 배열의 내부 데이터를 각각 직렬화 하여 저장
			for(int i = 0; i < nLength; i++)
			{
				Write(guids[i]);
			}
		}

		//=====================================================================================================================
		// PDVector3(좌표정보)의 정보를 직렬화 하여 스트림에 저장하는 함수
		//
		// vector3 : 송신할 PDVector3 데이터
		//=====================================================================================================================
		public void Write(PDVector3 vector3)
		{
			// vector3의 내부 정보를 각각 직렬화 하여 저장
			Write(vector3.x);
			Write(vector3.y);
			Write(vector3.z);
		}

		//=====================================================================================================================
		// PacketData(일반화된 송수신에 필요한 객체)의 정보를 직렬화 하여 스트림에 저장하는 함수
		//
		// instance : 송신할 PacketData 데이터
		//=====================================================================================================================
		public void Write(PacketData instance)
		{
			// 객체가 null의 경우 false 값을 직렬화 하여 저장
			if (instance == null)
			{
				Write(false);
				return;
			}

			// 객체가 null이 아닐경우 true 값을 직렬화 하여 저장
			Write(true);
			// PacketData를 상속받은 객체의 오버라이딩 된 Serialize 함수 호출
			instance.Serialize(this);
		}

		//=====================================================================================================================
		// PacketData(일반화된 송수신에 필요한 객체)의 정보를 직렬화 하여 스트림에 저장하는 함수
		//
		// instances : 송신할 PacketData 데이터 배열
		//=====================================================================================================================
		public void Write(PacketData[] instances)
		{
			// 배열이 null의 경우 false 값을 직렬화 하여 저장
			if (instances == null)
			{
				Write(false);
				return;
			}

			// 배열이 null이 아닐경우 true 값을 직렬화 하여 저장
			Write(true);

			// 배열의 길이를 저장
			int nLength = instances.Length;
			Write(nLength);

			// 배열의 내부 데이터를 각각 직렬화 하여 저장
			for (int i = 0; i < nLength; i++)
			{
				Write(instances[i]);
			}
		}
	}
}
